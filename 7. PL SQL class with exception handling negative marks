DROP TABLE IF EXISTS Result;
DROP TABLE IF EXISTS Student;

-- Create Student table
CREATE TABLE Student (
  rollno INT PRIMARY KEY,
  name VARCHAR(50),
  Marks1 INT,
  Marks2 INT,
  Marks3 INT,
  Marks4 INT,
  Marks5 INT
);

-- Create Result table
CREATE TABLE Result (
  rollno INT PRIMARY KEY,
  total_marks INT,
  class VARCHAR(20)
);

-- Insert sample data (including invalid marks to test exception handling)
INSERT INTO Student VALUES
(1, 'Alice', 95, 98, 92, 100, 90),
(2, 'Bob', 80, 85, 88, 79, 83),
(3, 'Charlie', 100, 105, 95, 90, 85),  -- Invalid Marks2=105
(4, 'David', -5, 70, 65, 60, 55),      -- Invalid Marks1=-5
(5, 'Eva', 60, 65, 70, 75, 80);

DELIMITER $$

-- Function to calculate total marks and validate marks with error signaling
CREATE FUNCTION calculate_total(
  m1 INT, m2 INT, m3 INT, m4 INT, m5 INT
) RETURNS INT
DETERMINISTIC
BEGIN
  IF m1 < 0 OR m2 < 0 OR m3 < 0 OR m4 < 0 OR m5 < 0 THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: Negative marks entered';
  END IF;

  IF m1 > 100 OR m2 > 100 OR m3 > 100 OR m4 > 100 OR m5 > 100 THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: Marks cannot be greater than 100';
  END IF;

  RETURN m1 + m2 + m3 + m4 + m5;
END$$

-- Procedure to calculate class and insert/update Result table
CREATE PROCEDURE calculate_class_and_store()
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE r_rollno INT;
  DECLARE r_m1, r_m2, r_m3, r_m4, r_m5 INT;
  DECLARE total INT;
  DECLARE cls VARCHAR(20);

  DECLARE cur CURSOR FOR SELECT rollno, Marks1, Marks2, Marks3, Marks4, Marks5 FROM Student;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  OPEN cur;

  read_loop: LOOP
    FETCH cur INTO r_rollno, r_m1, r_m2, r_m3, r_m4, r_m5;
    IF done THEN
      LEAVE read_loop;
    END IF;

    SET total = NULL;

    -- Handle exceptions in calculate_total call
    BEGIN
      DECLARE EXIT HANDLER FOR SQLEXCEPTION
      BEGIN
        SET total = NULL;
      END;

      SET total = calculate_total(r_m1, r_m2, r_m3, r_m4, r_m5);
    END;

    IF total IS NOT NULL THEN
      IF total BETWEEN 990 AND 1499 THEN
        SET cls = 'Distinction';
      ELSEIF total BETWEEN 900 AND 989 THEN
        SET cls = 'First Class';
      ELSEIF total BETWEEN 825 AND 899 THEN
        SET cls = 'Higher Second';
      ELSEIF total BETWEEN 750 AND 824 THEN
        SET cls = 'Second';
      ELSEIF total < 750 THEN
        SET cls = 'Pass';
      ELSE
        SET cls = 'Fail';
      END IF;

      INSERT INTO Result (rollno, total_marks, class)
      VALUES (r_rollno, total, cls)
      ON DUPLICATE KEY UPDATE total_marks = total, class = cls;
    END IF;

  END LOOP;

  CLOSE cur;
END$$

DELIMITER ;

-- Clear Result table before running
TRUNCATE TABLE Result;

-- Call procedure to calculate and store results
CALL calculate_class_and_store();

-- Display all students
SELECT * FROM Student;

-- Display results with total marks and class
SELECT * FROM Result;
